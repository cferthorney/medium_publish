<?php
/**
 * @file
 * Medium.module.
 *
 * Api documentation: https://github.com/Medium/medium-api-docs.
 */

use Drupal\Core\Routing\RouteMatchInterface;

/**
 * Implements hook_permission().
 */
function medium_publish_permission() {
  $permissions['administer medium'] = array(
    'title' => t('Administer Medium settings'),
    'restrict access' => TRUE,
    'description' => t('Configure the integration and which content types are allowed.'),
  );
  $permissions['publish to medium'] = array(
    'title' => t('Publish to Medium'),
    'description' => t('Write content and publish it to Medium.com'),
  );

  return $permissions;
}

/**
 * Implements hook_help().
 */
function medium_publish_help($path, $arg) {
  switch ($path) {
    case 'admin.help.medium_publish':
      return '<p>' . t('Medium Publish allows you to configure content types for export to Medium.com') . '</p>';
  }
}

/**
 * Implements hook_menu().
 */
function medium_publish_menu() {
  $items['admin/config/content/medium'] = array(
    'title' => 'Medium Publish',
    'description' => 'Configure Medium defaults.',
    'page callback' => 'medium_publish_config_overview',
    'access arguments' => array('administer medium'),
    'file' => 'medium_publish.admin.inc',
  );
  $items['admin/config/content/medium/config'] = array(
    'title' => 'Configuration',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10,
  );
  $items['admin/config/content/medium/config/add'] = array(
    'title' => 'Add config',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('medium_publish_config_add_form'),
    'access arguments' => array('administer medium'),
    'file' => 'medium_publish.admin.inc',
    'type' => MENU_LOCAL_ACTION,
  );
  $items['admin/config/content/medium/config/%medium_publish_config'] = array(
    'title callback' => 'medium_publish_config_title',
    'title arguments' => array(5),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('medium_publish_config_edit_form', 5),
    'access arguments' => array('administer medium'),
    'file' => 'medium_publish.admin.inc',
  );
  $items['admin/config/content/medium/config/%medium_publish_config/enable'] = array(
    'title' => 'Enable',
    'page callback' => 'medium_publish_config_enable',
    'page arguments' => array(5),
    'access callback' => 'medium_publish_config_access',
    'access arguments' => array('enable', 5),
    'file' => 'medium_publish.admin.inc',
  );
  $items['admin/config/content/medium/config/%medium_publish_config/disable'] = array(
    'title' => 'Disable',
    'page callback' => 'medium_publish_config_disable',
    'page arguments' => array(5),
    'access callback' => 'medium_publish_config_access',
    'access arguments' => array('disable', 5),
    'file' => 'medium_publish.admin.inc',
  );
  $items['admin/config/content/medium/config/%medium_publish_config/delete'] = array(
    'title' => 'Delete',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('medium_publish_config_delete_form', 5),
    'access callback' => 'medium_publish_config_access',
    'access arguments' => array('delete', 5),
    'file' => 'medium_publish.admin.inc',
  );

  $items['admin/config/content/medium/settings'] = array(
    'title' => 'Settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('medium_publish_admin_settings_form'),
    'access arguments' => array('administer medium'),
    'type' => MENU_LOCAL_TASK,
    'weight' => 30,
    'file' => 'medium_publish.admin.inc',
  );

  $items['api/medium'] = array(
    'title' => 'OAuth callback',
    'description' => 'Handle requests from Medium.com',
    'page callback' => 'medium_publish_auth_callback',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );

  $items['user/%user/medium'] = array(
    'title' => 'Medium.com Integration',
    'description' => 'Allow users to connect',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('medium_publish_user_info', 1),
    'access arguments' => array('publish to medium'),
    'type' => MENU_LOCAL_TASK,
  );

  return $items;
}

/**
 * Access callback for medium_publish configuration instances.
 */
function medium_publish_config_access($op, $config = NULL) {
  if (!user_access('administer medium ')) {
    return FALSE;
  }

  if ($op == 'enable') {
    return !empty($config->disabled);
  }
  elseif ($op == 'disable') {
    return empty($config->disabled);
  }
  elseif ($op == 'delete') {
    return ($config->export_type & EXPORT_IN_DATABASE) && !($config->export_type & EXPORT_IN_CODE);
  }

  return FALSE;
}

/**
 * Menu callback for authentication flow.
 */
function medium_publish_auth_callback() {
  global $user;
  global $base_url;

  if ($user->uid == 0) {
    return drupal_access_denied();
  }

  $client_id = variable_get('medium_publish_client_id', FALSE);
  $client_secret = variable_get('medium_publish_client_secret', FALSE);

  if (!$client_id || !$client_secret) {
    return drupal_access_denied();
  }

  if (isset($_GET['error']) && $_GET['error'] == 'access_denied') {
    drupal_set_message(t('User declined access to Medium account.'), 'warning');
    drupal_goto();
  }

  if (!isset($_GET['code'])) {
    return drupal_access_denied();
  }

  $authorization_code = $_GET['code'];

  $credentials = array(
    'client_id' => $client_id,
    'client_secret' => $client_secret,
    'redirect_url' => variable_get('medium_publish_redirect_url', $base_url . '/api/medium'),
    'state' => 'somesecret',
    'scopes' => 'basicProfile,publishPost,listPublications',
  );

  $medium = new MediumDrupal($credentials);

  try {
    $data = $medium->authenticate($authorization_code);
  }
  catch (MediumDrupalException $e) {
    watchdog('medium_publish', 'Unable to authenticate. Medium responded with @code: @message', array(
      '@code' => $e->getCode(),
      '@message' => $e->getMessage(),
    ));
    drupal_set_message(t('Something went wrong while authenicating with Medium, please try again later'), 'error');
    drupal_goto();
  }

  try {
    $user_info = $medium->getAuthenticatedUser();
    $publications = $medium->getPublications($user_info->data->id);

    $data['data'] = array(
      'user' => $user_info->data,
      'publications' => $publications->data,
    );
  }
  catch (MediumDrupalException $e) {
    watchdog('medium_publish', 'Unable to fetch user information. Medium responded with @code: @message', array(
      '@code' => $e->getCode(),
      '@message' => $e->getMessage(),
    ));
  }

  medium_publish_save_user_credentials($user, $data);

  drupal_set_message('Successfully connected to Medium');
  drupal_goto();
}

/**
 * Save Medium information to database.
 */
function medium_publish_save_user_credentials($user, $credentials) {
  $result = db_select('medium_publish_users', 'm')
    ->fields('m')
    ->condition('uid', $user->uid, '=')
    ->execute()
    ->fetchAssoc();

  if ($result) {
    $success = drupal_write_record('medium_publish_users', $credentials, 'uid');
    if ($success === FALSE) {
      return FALSE;
    }
  }
  else {
    $credentials['scope'] = implode(',', $credentials['scope']);
    $credentials['uid'] = $user->uid;

    $success = drupal_write_record('medium_publish_users', $credentials);
    if ($success === FALSE) {
      return FALSE;
    }
  }
  return TRUE;
}

/**
 * Implements hook_ctools_plugin_api().
 *
 * Tell CTools that we support the default_mymodule_presets API.
 */
function medium_publish_ctools_plugin_api($owner, $api) {
  if ($owner == 'medium_publish' && $api == 'medium_publish') {
    return array('version' => 1);
  }
}

/**
 * Implements hook_hook_info().
 */
function medium_publish_hook_info() {
  $hooks = array(
    'medium_publish_config_default',
    'medium_publish_config_presave',
    'medium_publish_config_insert',
    'medium_publish_config_update',
    'medium_publish_config_delete',
  );

  return array_fill_keys($hooks, array('group' => 'medium_publish'));
}

/**
 * Load a medium configuration record.
 */
function medium_publish_config_load($instance) {
  $results = medium_publish_config_load_multiple(array($instance));
  return !empty($results[$instance]) ? $results[$instance] : FALSE;
}

/**
 * Load multiple medium configuration records.
 */
function medium_publish_config_load_multiple(array $instances) {
  // Load the data.
  ctools_include('export');
  $configs = ctools_export_load_object('medium_publish_config', 'names', $instances);

  return $configs;
}

/**
 * Save a medium configuration record to the database.
 */
function medium_publish_config_save($config) {
  $config->is_new = empty($config->pid);

  // Allow modules to alter the configuration before it is saved using
  // hook_medium_publish_config_presave().
  module_invoke_all('medium_publish_config_presave', $config);

  if ($config->is_new) {
    drupal_write_record('medium_publish_config', $config);

    // Allow modules to act upon the record insertion using
    // hook_medium_publish_config_insert().
    module_invoke_all('medium_publish_config_insert', $config);
  }
  else {
    drupal_write_record('medium_publish_config', $config, array('pid'));

    // Allow modules to act upon the record update using
    // hook_medium_publish_config_insert().
    module_invoke_all('medium_publish_config_update', $config);
  }

  unset($config->is_new);
}

/**
 * Delete a medium configuration record.
 */
function medium_publish_config_delete($config) {
  db_delete('medium_publish_config')
    ->condition('instance', $config->instance)
    ->execute();

  // Allow modules to act upon the record deletion using
  // hook_medium_publish_config_delete().
  module_invoke_all('medium_publish_config_delete', $config);
}

/**
 * Implements hook_form_alter().
 *
 * If the user has access and content type is configured, add a form element.
 * then, in hook_insert or update check for this value and do something.
 */
function medium_publish_form_alter(&$form, &$form_state, $form_id) {
  if (!empty($form['#node_edit_form'])) {
    $node = $form['#node'];

    $client_id = variable_get('medium_publish_client_id', FALSE);
    $client_secret = variable_get('medium_publish_client_secret', FALSE);

    if (!$client_id || !$client_secret) {
      // Integration is not configured.
      return;
    }

    if (!medium_publish_config_load($node->type) || !user_access('publish to medium')) {
      return;
    }

    if (isset($node->nid) && $node->nid > 0) {
      // Existing node. Check for publishing.
      if (medium_publish_node_is_published($node)) {
        return;
      }
    }

    global $user;
    $user_info = medium_publish_load_user($user->uid);
    if (!$user_info) {
      return;
    }

    $form['medium'] = array(
      '#type' => 'fieldset',
      '#group' => 'additional_settings',
      '#title' => 'Medium.com',
      '#tree' => TRUE,
    );
    $form['medium']['publish'] = array(
      '#type' => 'checkbox',
      '#default_value' => 0,
      '#title' => 'Publish this node to Medium.com',
      '#description' => 'Checking this node will publish it to ...',
    );
    $form['medium']['publish_to'] = array(
      '#type' => 'select',
      '#options' => medium_publish_get_publishing_options($user_info),
      '#title' => t('Select account or publication to publish to'),
      '#required' => TRUE,
      '#default_value' => 'me',
      '#states' => array(
        'visible' => array(
          ':input[name="medium[publish]"]' => array('checked' => TRUE),
        ),
      ),
    );
    $form['medium']['user_info'] = array(
      '#type' => 'value',
      '#value' => $user_info,
    );
  }
}

/**
 * Implements hook_node_insert().
 */
function medium_publish_node_insert($node) {
  if (isset($node->medium) && $node->medium['publish'] == 1) {
    medium_publish_publish_article($node->medium['publish_to'], $node, $node->medium['user_info']);
  }
}

/**
 * Implements hook_node_update().
 */
function medium_publish_node_update($node) {
  if (isset($node->medium) && $node->medium['publish'] == 1) {
    medium_publish_publish_article($node->medium['publish_to'], $node, $node->medium['user_info']);
  }
}

/**
 * List allowed publications for user.
 */
function medium_publish_get_publishing_options($user_info) {
  $options = array(
    'me' => $user_info['data']['user']->name . ' (Your account)',
  );

  foreach ($user_info['data']['publications'] as $publication) {
    $options[t('Publications')][$publication->id] = $publication->name;
  }

  return $options;
}

/**
 * Check if node is already published.
 *
 * Because of the current state of the Medium API there is no update
 * option, so we need to know which nodes have been published.
 */
function medium_publish_node_is_published($node) {
  $node = db_select('medium_publish_nodes', 'p')
    ->fields('p')
    ->condition('nid', $node->nid)
    ->execute()
    ->fetchAssoc();

  if ($node) {
    return TRUE;
  }
  return FALSE;
}

/**
 * Mark node as published.
 */
function medium_publish_mark_node_published($uid, $node) {
  db_insert('medium_publish_nodes')
    ->fields(array(
      'nid' => $node->nid,
      'uid' => $uid,
      'published' => time(),
    ))
    ->execute();
}


/**
 * Load the access tokens this user may use.
 */
function medium_publish_load_user($uid) {
  $user_info = db_select('medium_publish_users', 'm')
    ->fields('m')
    ->condition('uid', $uid)
    ->execute()
    ->fetchAssoc();

  if ($user_info) {
    $user_info['data'] = unserialize($user_info['data']);
    return $user_info;
  }
  return FALSE;
}

/**
 * Delete user information.
 */
function medium_publish_delete_user_data($access_token) {
  $row_deleted = db_delete('medium_publish_users')
    ->condition('access_token', $access_token)
    ->execute();
}

/**
 * Publish an article to Medium.com.
 */
function medium_publish_publish_article($publish_id, $node, $user_info) {
  $config = medium_publish_config_load($node->type);

  $client_id = variable_get('medium_publish_client_id', FALSE);
  $client_secret = variable_get('medium_publish_client_secret', FALSE);

  if (!$client_id || !$client_secret) {
    return FALSE;
  }

  $credentials = array(
    'client_id' => $client_id,
    'client_secret' => $client_secret,
    'access_token' => $user_info['access_token'],
  );

  $medium = new MediumDrupal($credentials);

  if ($user_info['expires_at'] < time()) {
    // Request new token.
    try {
      $ok = $medium->exchangeRefreshToken($user_info['refresh_token']);
      if (!$ok) {
        medium_publish_delete_user_data($user_info['access_token']);
        return FALSE;
      }
    }
    catch (MediumDrupalException $e) {
      watchdog('medium_publish', 'Unable to refresh token. Medium responded with @code: @message', array(
        '@code' => $e->getCode(),
        '@message' => $e->getMessage(),
      ));
      return FALSE;
    }
  }

  if (!empty($config->disabled)) {
    return FALSE;
  }

  $to_send = array();

  $to_send['title'] = token_replace($config->config['title'], array('node' => $node));
  $to_send['contentFormat'] = $config->config['format'];
  $to_send['content'] = '<h1>' . $to_send['title'] . '</h1>';
  $to_send['content'] .= token_replace($config->config['content'], array('node' => $node));
  $to_send['publishStatus'] = $config->config['status'];

  $canonical = token_replace($config->config['canonical'], array('node' => $node));
  if (!empty($canonical) && $canonical !== $config->config['canonical']) {
    $to_send['canonicalUrl'] = $canonical;
  }
  $tags = token_replace($config->config['tags'], array('node' => $node));
  if (!empty($tags) && $tags !== $config->config['tags']) {
    $to_send['tags'] = explode(',', $tags);
  }

  try {
    if ($publish_id == 'me') {
      $medium->createPost($user_info['data']['user']->id, $to_send);
    }
    else {
      $medium->createPostforPublication($publish_id, $to_send);
    }
    medium_publish_mark_node_published($user_info['uid'], $node);
  }
  catch (MediumDrupalException $e) {
    watchdog('medium_publish', 'Unable to publish. Medium responded with @code: @message', array(
      '@code' => $e->getCode(),
      '@message' => $e->getMessage(),
    ));
    return FALSE;
  }
}

/**
 * Page callback for connecting to Medium.com.
 */
function medium_publish_user_info($form, &$form_state, $user) {
  global $base_url;

  $user_info = medium_publish_load_user($user->uid);
  if ($user_info) {
    // Connected.
    $form['connected'] = array(
      '#markup' => 'You are connected',
    );
    $form['actions'] = array(
      '#type' => 'actions',
    );
    $form['access_token'] = array(
      '#type' => 'value',
      '#value' => $user_info['access_token'],
    );
    $form['actions']['refresh'] = array(
      '#type' => 'submit',
      '#value' => 'Refresh your information',
      '#name' => 'refresh',
    );
    $form['actions']['remove'] = array(
      '#type' => 'submit',
      '#value' => 'Remove connection',
      '#name' => 'remove',
    );
  }
  else {
    // Connect.
    $credentials = array(
      'client_id' => variable_get('medium_publish_client_id', ''),
      'client_secret' => variable_get('medium_publish_client_secret', ''),
      'redirect_url' => variable_get('medium_publish_redirect_url', $base_url . '/api/medium'),
      'state' => 'somesecret',
      'scopes' => 'basicProfile,publishPost,listPublications',
    );

    $medium = new MediumDrupal($credentials);

    $form['connected'] = array(
      '#markup' => l(t('Connect to Medium.com'), $medium->getAuthenticationUrl()),
    );
  }
  return $form;
}

/**
 * Submit handler for user tab.
 */
function medium_publish_user_info_submit(&$form, &$form_state) {
  if ($form_state['triggering_element']['#name'] == 'remove') {
    // Delete from database.
    medium_publish_delete_user_data($form_state['values']['access_token']);
    drupal_set_message(t('You have successfully disconnected from Medium.'), 'status');
  }
  elseif ($form_state['triggering_element']['#name'] == 'refresh') {
    global $user;

    $client_id = variable_get('medium_publish_client_id', FALSE);
    $client_secret = variable_get('medium_publish_client_secret', FALSE);

    $credentials = array(
      'client_id' => $client_id,
      'client_secret' => $client_secret,
      'access_token' => $form_state['values']['access_token'],
    );

    $user_info = medium_publish_load_user($user->uid);

    $medium = new MediumDrupal($credentials);
    try {
      $new_data = $medium->getAuthenticatedUser();
      $publications = $medium->getPublications($user_info['data']['user']->id);

      $extra_data = array(
        'user' => $new_data->data,
        'publications' => $publications->data,
      );

      $user_info['data'] = $extra_data;

      medium_publish_save_user_credentials($user, $user_info);
    }
    catch (MediumDrupalException $e) {
      watchdog('medium_publish', 'Unable to refresh user information. Medium responded with @code: @message', array(
        '@code' => $e->getCode(),
        '@message' => $e->getMessage(),
      ));
      drupal_set_message(t('Unable to refresh user information.'), 'error');
    }
  }
}

/**
 * Title callback to prettify titles.
 */
function medium_publish_config_title($config) {
  return drupal_ucfirst($config->instance);
}
